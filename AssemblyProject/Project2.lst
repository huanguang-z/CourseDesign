Microsoft (R) Macro Assembler Version 6.11		    08/28/23 21:11:14
tempfile.asm						     Page 1 - 1


 0000				DATAS SEGMENT

 0000 50 4C 45 41 53 45		   STRING DB 'PLEASE INPUT A NUMBER YOU WANT TO CALCULATE:',0DH,0AH,'$'
       20 49 4E 50 55 54
       20 41 20 4E 55 4D
       42 45 52 20 59 4F
       55 20 57 41 4E 54
       20 54 4F 20 43 41
       4C 43 55 4C 41 54
       45 3A 0D 0A 24
 002F 0D 0A 20 54 48 45		   ERROR DB 0DH,0AH,' THE NUMBER IS TOO BIG! ',0DH,0AH,'$'
       20 4E 55 4D 42 45
       52 20 49 53 20 54
       4F 4F 20 42 49 47
       21 20 0D 0A 24
 004C 0D 0A 52 45 53 55		   OUTSTR DB 0DH,0AH,'RESULT IS : $'
       4C 54 20 49 53 20
       3A 20 24
 005B 0D 0A 44 6F 20 79		   	ASK_1 DB 13,10,'Do you want to calculate the factorial of a number?','$'
       6F 75 20 77 61 6E
       74 20 74 6F 20 63
       61 6C 63 75 6C 61
       74 65 20 74 68 65
       20 66 61 63 74 6F
       72 69 61 6C 20 6F
       66 20 61 20 6E 75
       6D 62 65 72 3F 24
 0091 0D 0A 50 6C 65 61			ASK_2 DB 13,10,'Please input Y/N:','$'
       73 65 20 69 6E 70
       75 74 20 59 2F 4E
       3A 24
 00A5 0D 0A 44 6F 20 79			ASK_3 DB 13,10,'Do you want to calculate the number of a number again ?','$'
       6F 75 20 77 61 6E
       74 20 74 6F 20 63
       61 6C 63 75 6C 61
       74 65 20 74 68 65
       20 6E 75 6D 62 65
       72 20 6F 66 20 61
       20 6E 75 6D 62 65
       72 20 61 67 61 69
       6E 20 3F 24
 00DF 0D 0A 54 68 65 20			ANS DB 13,10,'The character is wrong, please input again','$'
       63 68 61 72 61 63
       74 65 72 20 69 73
       20 77 72 6F 6E 67
       2C 20 70 6C 65 61
       73 65 20 69 6E 70
       75 74 20 61 67 61
       69 6E 24
 010C  2710 [			   A DW 10000 DUP (0),0
        0000
       ] 0000
 4F2E 0001			   ANUM DW 1
 4F30 0000			   CARRY DW 0

 4F32 20 20 20 20 20 20			 infor1 db  "                welocom you to come here listeng!", '$'
       20 20 20 20 20 20
       20 20 20 20 77 65
       6C 6F 63 6F 6D 20
       79 6F 75 20 74 6F
       20 63 6F 6D 65 20
       68 65 72 65 20 6C
       69 73 74 65 6E 67
       21 24
					
 4F64 0106 0106 0106 0126		 mus_freg dw 262,262,262,294,262
       0106
 4F6E  0188 01B8 014A				  dw 392,440,330,330,294
       014A 0126
 4F78  00F7 00F7 00F7				  dw 247,247,247,262,247
       0106 00F7
 4F82  014A 0188 00F7				  dw 330,392,247,294,262
       0126 0106
 4F8C  00DC 00F7 00DC				  dw 220,247,220,247,220
       00F7 00DC
 4F96  014A 015D 0106				  dw 330,349,262,220,247
       00DC 00F7
 4FA0  00C4 0106 0126				  dw 196,262,294,294
       0126
 4FA8  015D 014A 014A				  dw 349,330,330,294,262,294
       0126 0106 0126
 4FB4  014A 0106 0106				  dw 330,262,262,262,294,262
       0106 0126 0106
 4FC0  0188 01B8 014A				  dw 392,440,330,330,294
       014A 0126
 4FCA  0126 00F7 00F7				  dw 294,247,247,247,262,247
       00F7 0106 00F7
 4FD6  014A 0188 00F7				  dw 330,392,247,294,262
       0126 0106
 4FE0  00DC 00F7 00DC				  dw 220,247,220,247,220
       00F7 00DC
 4FEA  014A 015D 00DC				  dw 330,349,220,262,247
       0106 00F7
 4FF4  00F7 014A 0188				  dw 247,330,392,294,262
       0126 0106
 4FFE  FFFF					  dw -1

 5000 0019 0019 0019 0019		 mus_time  dw 25,25,25,25,25
       0019
 500A  0019 0064 0019				  dw 25,100,25,25,100
       0019 0064
 5014  0019 0019 0019				  dw 25,25,25,25,25
       0019 0019
 501E  0019 0064 0019				  dw 25,100,25,25,100
       0019 0064
 5028  0019 0019 0019				  dw 25,25,25,25,25
       0019 0019
 5032  0019 0064 0019				  dw 25,100,25,25,75
       0019 004B
 503C  0019 0032 0032				  dw 25,50,50,25
       0019
 5044  0032 0019 0019				  dw 50,25,25,25,50,25
       0019 0032 0019
 5050  004B 0019 0019				  dw 75,25,25,25,25,25
       0019 0019 0019
 505C  0019 0064 0019				  dw 25,100,25,25,25
       0019 0019
 5066  004B 0019 0019				  dw 75,25,25,25,25,25
       0019 0019 0019
 5072  0019 0064 0019				  dw 25,100,25,25,100
       0019 0064
 507C  0019 0019 0019				  dw 25,25,25,25,25
       0019 0019
 5086  0019 0064 0019				  dw 25,100,25,25,25
       0019 0019
 5090  0064 0032 0019				  dw 100,50,25,50,75
       0032 004B


 509A 0D 0A 20 20 20 2B			WELCOME 	DB  0DH, 0AH, '   +-----------------------------------+', 0DH, 0AH
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2B
       0D 0A
 50C6  20 20 20 7C 20 20					DB '   |                    	       |', 0DH, 0AH
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       09 20 20 20 20 20
       20 20 7C 0D 0A
 50E9  20 20 20 7C 20 20					DB '   |                     	       |', 0DH, 0AH			   
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 09 20 20 20 20
       20 20 20 7C 0D 0A
 510D  20 20 20 7C 20 20					DB '   |    Welcome to project 2 of ZWR    |', 0DH, 0AH
       20 20 57 65 6C 63
       6F 6D 65 20 74 6F
       20 70 72 6F 6A 65
       63 74 20 32 20 6F
       66 20 5A 57 52 20
       20 20 20 7C 0D 0A
 5137  20 20 20 7C 20 20					DB '   |                      	       |', 0DH, 0AH
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 09 20 20 20
       20 20 20 20 7C 0D
       0A
 515C  20 20 20 7C 20 20					DB '   |                    	       |', 0DH, 0AH
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 20
       09 20 20 20 20 20
       20 20 7C 0D 0A
 517F  20 20 20 2B 2D 2D					DB '   +-----------------------------------+', 0DH, 0AH
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2B 0D 0A
 51A9  20 20 20 20 20 20					DB '            | | |         ', 0DH, 0AH
       20 20 20 20 20 20
       7C 20 7C 20 7C 20
       20 20 20 20 20 20
       20 20 0D 0A
 51C5  20 20 20 20 20 20					DB '            | | | ____________       ', 0DH, 0AH
       20 20 20 20 20 20
       7C 20 7C 20 7C 20
       5F 5F 5F 5F 5F 5F
       5F 5F 5F 5F 5F 5F
       20 20 20 20 20 20
       20 0D 0A
 51EC  20 20 20 20 20 20					DB '            | | |/            \  ', 0DH, 0AH
       20 20 20 20 20 20
       7C 20 7C 20 7C 2F
       20 20 20 20 20 20
       20 20 20 20 20 20
       5C 20 20 0D 0A
 520F  20 20 20 20 20 20					DB '      +-------------------+    \     ', 0DH, 0AH
       2B 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2B 20 20 20
       20 5C 20 20 20 20
       20 0D 0A
 5236  20 20 20 20 20 2F					DB '     / ................../    /|\   ', 0DH, 0AH
       20 2E 2E 2E 2E 2E
       2E 2E 2E 2E 2E 2E
       2E 2E 2E 2E 2E 2E
       2E 2F 20 20 20 20
       2F 7C 5C 20 20 20
       0D 0A
 525C  20 20 20 20 2F 2E					DB '    /.....===.........../     \_/ ', 0DH, 0AH
       2E 2E 2E 2E 3D 3D
       3D 2E 2E 2E 2E 2E
       2E 2E 2E 2E 2E 2E
       2F 20 20 20 20 20
       5C 5F 2F 20 0D 0A
 5280  20 20 20 2B 2D 2D					DB '   +-------------------+         ', 0DH, 0AH
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2B
       20 20 20 20 20 20
       20 20 20 0D 0A
 52A3  24							DB '$'
				   
 52A4				DATAS ENDS

 0000				stack segment stack
 0000  0384 [			      db 900 dup(?)
        00
       ]
 0384				stack ends

				SHOWBM MACRO b
				     LEA DX,b
				     MOV AH,9
				     INT 21H
				ENDM
				 
				ADDRESS MACRO A,B
				     LEA SI,A
				     LEA BP,DS:B
				ENDM


 0000				CODES SEGMENT
				    ASSUME CS:CODES,ss:stack,DS:DATAS
 0000				START:
					
 0000  B8 ---- R		     mov ax, DATAS
 0003  8E D8			     mov ds, ax
 0005  B8 ---- R		     mov ax, stack
 0008  8E D0			     mov ss, ax
 000A  BC 00C8			     mov sp, 200
 000D  8D 16 4F32 R		    LEA DX,infor1
 0011  B4 09			   	MOV AH,09H
 0013  CD 21			   	INT 21H

				     address mus_freg, mus_time
 0015  8D 36 4F64 R	     1	     LEA SI,mus_freg
 0019  8D 2E 5000 R	     1	     LEA BP,DS:mus_time
 001D  E8 0043			     call music

				 
 0020				exit:     
 0020  EB 5A			     jmp START1
				;------------发声-------------
 0022				gensound proc near
 0022  50			     push ax
 0023  53			     push bx
 0024  51			     push cx
 0025  52			     push dx
 0026  57			     push di
				 
 0027  B0 B6			     mov al, 0b6H
 0029  E6 43			     out 43h, al
 002B  BA 0012			     mov dx, 12h
 002E  B8 348C			     mov ax, 348ch
 0031  F7 F7			     div di
 0033  E6 42			     out 42h, al
				 
 0035  8A C4			     mov al, ah
 0037  E6 42			     out 42h, al
				 
 0039  E4 61			     in al, 61h
 003B  8A E0			     mov ah, al
 003D  0C 03			     or al, 3
 003F  E6 61			     out 61h, al
 0041				wait1:
 0041  B9 0CF2			     mov cx, 3314
 0044  E8 000D			     call waitf
 0047				delay1:
 0047  4B			     dec bx
 0048  75 F7			     jnz wait1
				 
 004A  8A C4			     mov al, ah
 004C  E6 61			     out 61h, al
				 
 004E  5F			     pop di
 004F  5A			     pop dx
 0050  59			     pop cx
 0051  5B			     pop bx
 0052  58			     pop ax
 0053  C3			     ret 
 0054				gensound endp
				 
				;--------------------------
 0054				waitf proc near
 0054  50			      push ax
 0055				waitf1:
 0055  E4 61			      in al,61h
 0057  24 10			      and al,10h
 0059  38 E0			      cmp al,ah
 005B  74 F8			      je waitf1
 005D  8A E0			      mov ah,al
 005F  E2 F4			      loop waitf1
 0061  58			      pop ax
 0062  C3			      ret
 0063				waitf endp
				;--------------发声调用函数----------------
 0063				music proc near
 0063  33 C0			      xor ax, ax
 0065				freg:
 0065  8B 3C			      mov di, [si]
 0067  83 FF FF			      cmp di, 0FFFFH
 006A  74 0F			      je end_mus
 006C  3E: 8B 5E 00		      mov bx, ds:[bp]
 0070  E8 FFAF			      call gensound
 0073  83 C6 02			      add si, 2
 0076  83 C5 02			      add bp, 2
 0079  EB EA			      jmp freg
 007B				end_mus:
 007B  C3			      ret
 007C				music endp
				    

 007C				START1:

 007C  B4 09			MOV 	AH, 	9             	;输出登录成功的提示
 007E  BA 509A R		      	MOV 	DX, 	OFFSET WELCOME
 0081  CD 21			      	INT 	21H
					
 0083  B4 08				MOV AH,08H
 0085  CD 21				INT 21H
					
 0087  B4 07				MOV AH,07H
 0089  CD 21				INT 21H
					
 008B  B8 0003				MOV AX,3
 008E  CD 10				INT 10H
					
 0090  B8 0000			 	MOV AX,0
 0093  BB 0000				MOV BX,0
 0096  B9 0000				MOV CX,0
 0099  BA 0000				MOV DX,0
 009C  B8 ---- R		    MOV AX,DATAS
 009F  8E D8			    MOV DS,AX
 00A1  B4 00			  	mov ah,0  
				  	  	
				   	
 00A3				ASK:    
 00A3  8D 16 005B R			LEA DX,ASK_1
 00A7  B4 09			   	MOV AH,09H
 00A9  CD 21			   	INT 21H
				   	
 00AB  8D 16 0091 R		In1:	LEA DX,ASK_2
 00AF  B4 09			   	MOV AH,09H
 00B1  CD 21			   	INT 21H
				   	
 00B3  B4 01			   	MOV AH,01H      ;键盘输入并显示，字符存于AL中
 00B5  CD 21			   	INT 21H
				   	   	
 00B7  3C 59			   	CMP AL,'Y'      ;比较刚输入的字符与Y字符，相等跳转到BEGIN_1中
 00B9  74 11			   	JE BEGIN_1
				   	
 00BB  3C 4E			   	CMP AL,'N'      ;比较刚输入的字符与N字符，相等跳转到END_0中，不等则跳转到ASK重输入
 00BD  75 03 E9 012B		   	JE END_0   	
				   	
 00C2  8D 16 00DF R		WRONG:	LEA DX,ANS
 00C6  B4 09			   	MOV AH,09H
 00C8  CD 21			   	INT 21H
 00CA  EB DF			   	JMP In1   	
				   	

				    
 00CC				BEGIN_1:   
 00CC  B9 2710				mov cx,10000
 00CF  8D 36 010C R			LEA SI,A
 00D3				Init:
 00D3  B8 0000				MOV AX,0
 00D6  89 04				MOV [SI],AX
 00D8  46				INC SI
 00D9  E2 F8				LOOP Init

 00DB  B2 0D				MOV DL,0DH
 00DD  B4 02			    MOV AH,2H
 00DF  CD 21			    INT 21h
 00E1  B2 0A			    MOV DL,0AH
 00E3  B4 02			    MOV AH,2H
 00E5  CD 21			    INT 21h
				    
 00E7  B8 ---- R			 MOV AX,DATAS
 00EA  8E D8			    MOV DS,AX
 00EC  BA 0000 R		    MOV DX,OFFSET STRING
 00EF  B4 09			    MOV AH,09H
 00F1  CD 21			    INT 21H
 00F3  E8 002E			    CALL SHURU
 00F6  81 FD 07D0		    CMP BP,2000
 00FA  76 09			    JBE MOK
 00FC  BA 002F R		    MOV DX,OFFSET ERROR
 00FF  B4 09			    MOV AH,9
 0101  CD 21			    INT 21H
 0103  EB C7			    JMP BEGIN_1

 0105				MOK:
 0105  E8 004C				CALL FACTORIAL
 0108  E8 00BE				CALL SHUCHU
 010B  EB 00			    JMP OVER

 010D				OVER:
 010D  B4 08				MOV AH,08H
 010F  CD 21				INT 21H

 0111  B4 07				MOV AH,07H
 0113  CD 21				INT 21H
 0115  B8 0003				MOV AX,3
 0118  CD 10				INT 10H
					
 011A  8D 16 00A5 R			LEA DX,ASK_3
 011E  B4 09			   	MOV AH,09H
 0120  CD 21			   	INT 21H
 0122  EB 87			   	JMP In1

 0124				SHURU PROC
 0124  52				PUSH DX
 0125  51				PUSH CX
 0126  53				PUSH BX
 0127  50				PUSH AX
 0128  33 ED				XOR BP,BP
 012A  BB 000A				MOV BX,10
 012D  B9 0005				MOV CX,5 ;读取字符数目
 0130				INPUT:
 0130  B4 00				MOV AH,0
 0132  CD 16				INT 16H
 0134  3C 0D				CMP AL,0DH
 0136  74 16				JZ OK
 0138  3C 30				CMP AL,'0'
 013A  72 F4				JB INPUT
 013C  3C 39				CMP AL,'9'
 013E  77 F0				JA INPUT
 0140  B4 0E				MOV AH,0EH
 0142  CD 10				INT 10H
 0144  83 E0 0F				AND AX,000FH ;清除高四位
 0147  95				XCHG AX,BP
 0148  F7 E3				MUL BX 
 014A  03 E8				ADD BP,AX ;乘法指令将输入的数字乘以 10，然后将乘积与 BP 寄存器相加，将结果存储在 BP
 014C  E2 E2				LOOP INPUT
 014E  90			OK:	NOP
 014F  58				POP AX
 0150  5B				POP BX
 0151  59				POP CX
 0152  5A				POP DX
 0153  C3				RET
 0154				SHURU ENDP

 0154				FACTORIAL PROC
 0154  52				PUSH DX
 0155  51				PUSH CX
 0156  53				PUSH BX
 0157  50				PUSH AX
 0158  8B C5				MOV AX,BP ;BP寄存器的值存入AX寄存器，并与1进行比较
 015A  83 FD 01				CMP BP,1
 015D  75 08				JNZ BEGIN ;如果BP不等于1，则跳转到BEGIN标签处执行递归操作
 015F  A3 010C R			MOV A[0],AX
 0162  58				POP AX
 0163  5B				POP BX
 0164  59				POP CX
 0165  5A				POP DX
 0166  C3				RET
 0167				BEGIN:
 0167  4D				DEC BP
 0168  E8 FFE9				CALL FACTORIAL ;将BP寄存器的值减1，并调用自身的递归操作
 016B  BB 0001				MOV BX,1
 016E				AMUL:
 016E  50				PUSH AX
 016F  53				PUSH BX
 0170  D1 E3				SHL BX,1
 0172  F7 A7 010A R			MUL A[BX-2] ;MUL指令将AX寄存器与数组A中相应位置的值相乘，并将乘积存储在AX寄存器中
 0176  5B				POP BX  ;BX-2的原因：BX-2 是用于计算数组元素的偏移量。由于 A 是一个双字节数组，每个元素占用两个字节的存储空间，所以需要将 BX 寄存器的值减去 2 来获得正确的偏移量
 0177  03 06 4F30 R			ADD AX,CARRY ;将进位存储在CARRY变量中
 017B  BA 0000				MOV DX,0
 017E  B9 000A				MOV CX,10
 0181  F7 F1				DIV CX ;将AX寄存器中的值与10进行除法运算，商存储在AX寄存器中，余数存储在DX寄存器中。通过DIV指令完成除法运算
 0183  A3 4F30 R			MOV CARRY,AX
 0186  53				PUSH BX
 0187  D1 E3				SHL BX,1 ;因为数组 A 中的元素是双字节（16位）大小的，将 BX 寄存器的值左移一位，相当于将其乘以 2
 0189  89 97 010A R			MOV A[BX-2],DX
 018D  5B				POP BX
 018E  58				POP AX ;DX寄存器中的值存储在数组A的相应位置，恢复BX寄存器的值，并将AX寄存器中的值弹出
 018F  3B 1E 4F2E R			CMP BX,ANUM
 0193  74 03				JZ DCARRY ;比较BX寄存器的值与ANUM变量的值，如果相等，则跳转到DCARRY标签
 0195  43				INC BX
 0196  EB D6				JMP AMUL ;如果不相等，则将BX寄存器的值增加1，并跳转到AMUL标签处进行下一轮的阶乘计算

 0198				DCARRY:
 0198  50				PUSH AX
 0199  83 3E 4F30 R 00			CMP CARRY,0
 019E  74 23				JZ DONE ;将AX寄存器的值压入栈中。然后比较CARRY变量的值是否为0，如果为0，则跳转到DONE标签处，执行栈和寄存器的清理操作，并返回
 01A0  43				INC BX
 01A1  A1 4F30 R			MOV AX,CARRY
 01A4  BA 0000				MOV DX,0
 01A7  B9 000A				MOV CX,10
 01AA  F7 F1				DIV CX ;将BX寄存器的值增加1，并将CARRY变量的值存储在AX寄存器中。接着，使用除法指令将AX寄存器的值与10进行除法运算，商存储在AX寄存器中，余数存储在DX寄存器中
 01AC  53				PUSH BX
 01AD  D1 E3				SHL BX,1
 01AF  89 97 010A R			MOV A[BX-2],DX
 01B3  5B				POP BX
 01B4  A3 4F30 R			MOV CARRY,AX
 01B7  8B 0E 4F2E R			MOV CX,ANUM
 01BB  41				INC CX
 01BC  89 0E 4F2E R			MOV ANUM,CX ;将DX寄存器的值存储在数组A的相应位置，恢复BX寄存器的值，并将AX寄存器中的值弹出。继续将AX寄存器的值存储在CARRY变量中，并将ANUM变量的值增加1
 01C0  58				POP AX
 01C1  EB D5				JMP DCARRY
 01C3				DONE:
 01C3  58				POP AX
 01C4  58				POP AX
 01C5  5B				POP BX
 01C6  59				POP CX
 01C7  5A				POP DX
 01C8  C3				RET
 01C9				FACTORIAL ENDP

 01C9				SHUCHU PROC
 01C9  BA 004C R			MOV DX,OFFSET OUTSTR
 01CC  B4 09				MOV AH,09H
 01CE  CD 21				INT 21H
 01D0  8B 1E 4F2E R			MOV BX,ANUM ;将阶乘结果的元素个数存储在寄存器 BX 中，它被用作循环计数器
 01D4				BEGINO:
 01D4  53				PUSH BX
 01D5  D1 E3				SHL BX,1 ;将 BX 寄存器的值压入栈中，然后将其左移一位（相当于乘以 2
 01D7  8B 87 010A R			MOV AX,A[BX-2] ;使用 MOV AX, A[BX-2] 指令,从数组 A 中取出对应的阶乘结果,A[BX-2] 是通过将 BX 寄存器的值减去 2 来计算数组元素的偏移量，因为每个元素占用两个字节
 01DB  5B				POP BX
 01DC  04 30				ADD AL,30H
 01DE  8A D0				MOV DL,AL
 01E0  B4 02				MOV AH,02H
 01E2  CD 21				INT 21H ;将字符转十进制打印输出
 01E4  83 FB 01				CMP BX,1
 01E7  74 03				JZ ENDO
 01E9  4B				DEC BX
 01EA  EB E8				JMP BEGINO ;比较 BX 寄存器的值是否等于 1，如果是，则跳转到标签 ENDO，结束循环。否则，将 BX 寄存器的值减一，然后跳转回循环标签 BEGINO，继续下一次循环
 01EC  C3			ENDO: RET
 01ED				SHUCHU ENDP

 01ED				END_0:
 01ED  B8 4C00				mov ax,4c00h
 01F0  CD 21				int 21h

 01F2				CODES ENDS
				    END START




Microsoft (R) Macro Assembler Version 6.11		    08/28/23 21:11:14
tempfile.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

ADDRESS  . . . . . . . . . . . .	Proc
SHOWBM . . . . . . . . . . . . .	Proc


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

CODES  . . . . . . . . . . . . .	16 Bit	 01F2	  Para	  Private 
DATAS  . . . . . . . . . . . . .	16 Bit	 52A4	  Para	  Private 
stack  . . . . . . . . . . . . .	16 Bit	 0384	  Para	  Stack	  


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

FACTORIAL  . . . . . . . . . . .	P Near	 0154	  CODES	Length= 0075 Public
  BEGIN  . . . . . . . . . . . .	L Near	 0167	  CODES	
  AMUL . . . . . . . . . . . . .	L Near	 016E	  CODES	
  DCARRY . . . . . . . . . . . .	L Near	 0198	  CODES	
  DONE . . . . . . . . . . . . .	L Near	 01C3	  CODES	
SHUCHU . . . . . . . . . . . . .	P Near	 01C9	  CODES	Length= 0024 Public
  BEGINO . . . . . . . . . . . .	L Near	 01D4	  CODES	
  ENDO . . . . . . . . . . . . .	L Near	 01EC	  CODES	
SHURU  . . . . . . . . . . . . .	P Near	 0124	  CODES	Length= 0030 Public
  INPUT  . . . . . . . . . . . .	L Near	 0130	  CODES	
  OK . . . . . . . . . . . . . .	L Near	 014E	  CODES	
gensound . . . . . . . . . . . .	P Near	 0022	  CODES	Length= 0032 Public
  wait1  . . . . . . . . . . . .	L Near	 0041	  CODES	
  delay1 . . . . . . . . . . . .	L Near	 0047	  CODES	
music  . . . . . . . . . . . . .	P Near	 0063	  CODES	Length= 0019 Public
  freg . . . . . . . . . . . . .	L Near	 0065	  CODES	
  end_mus  . . . . . . . . . . .	L Near	 007B	  CODES	
waitf  . . . . . . . . . . . . .	P Near	 0054	  CODES	Length= 000F Public
  waitf1 . . . . . . . . . . . .	L Near	 0055	  CODES	


Symbols:

                N a m e                 Type     Value    Attr

ANS  . . . . . . . . . . . . . .	Byte	 00DF	  DATAS	
ANUM . . . . . . . . . . . . . .	Word	 4F2E	  DATAS	
ASK_1  . . . . . . . . . . . . .	Byte	 005B	  DATAS	
ASK_2  . . . . . . . . . . . . .	Byte	 0091	  DATAS	
ASK_3  . . . . . . . . . . . . .	Byte	 00A5	  DATAS	
ASK  . . . . . . . . . . . . . .	L Near	 00A3	  CODES	
A  . . . . . . . . . . . . . . .	Word	 010C	  DATAS	
BEGIN_1  . . . . . . . . . . . .	L Near	 00CC	  CODES	
CARRY  . . . . . . . . . . . . .	Word	 4F30	  DATAS	
END_0  . . . . . . . . . . . . .	L Near	 01ED	  CODES	
ERROR  . . . . . . . . . . . . .	Byte	 002F	  DATAS	
In1  . . . . . . . . . . . . . .	L Near	 00AB	  CODES	
Init . . . . . . . . . . . . . .	L Near	 00D3	  CODES	
MOK  . . . . . . . . . . . . . .	L Near	 0105	  CODES	
OUTSTR . . . . . . . . . . . . .	Byte	 004C	  DATAS	
OVER . . . . . . . . . . . . . .	L Near	 010D	  CODES	
START1 . . . . . . . . . . . . .	L Near	 007C	  CODES	
START  . . . . . . . . . . . . .	L Near	 0000	  CODES	
STRING . . . . . . . . . . . . .	Byte	 0000	  DATAS	
WELCOME  . . . . . . . . . . . .	Byte	 509A	  DATAS	
WRONG  . . . . . . . . . . . . .	L Near	 00C2	  CODES	
exit . . . . . . . . . . . . . .	L Near	 0020	  CODES	
infor1 . . . . . . . . . . . . .	Byte	 4F32	  DATAS	
mus_freg . . . . . . . . . . . .	Word	 4F64	  DATAS	
mus_time . . . . . . . . . . . .	Word	 5000	  DATAS	

	   0 Warnings
	   0 Errors
